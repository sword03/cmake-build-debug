// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hello.proto

#ifndef PROTOBUF_INCLUDED_hello_2eproto
#define PROTOBUF_INCLUDED_hello_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hello_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_hello_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace hello_world {
class EnclaveInput;
class EnclaveInputDefaultTypeInternal;
extern EnclaveInputDefaultTypeInternal _EnclaveInput_default_instance_;
class EnclaveOutput;
class EnclaveOutputDefaultTypeInternal;
extern EnclaveOutputDefaultTypeInternal _EnclaveOutput_default_instance_;
class HelloInput;
class HelloInputDefaultTypeInternal;
extern HelloInputDefaultTypeInternal _HelloInput_default_instance_;
class HelloOutput;
class HelloOutputDefaultTypeInternal;
extern HelloOutputDefaultTypeInternal _HelloOutput_default_instance_;
}  // namespace hello_world
namespace google {
namespace protobuf {
template<> ::hello_world::EnclaveInput* Arena::CreateMaybeMessage<::hello_world::EnclaveInput>(Arena*);
template<> ::hello_world::EnclaveOutput* Arena::CreateMaybeMessage<::hello_world::EnclaveOutput>(Arena*);
template<> ::hello_world::HelloInput* Arena::CreateMaybeMessage<::hello_world::HelloInput>(Arena*);
template<> ::hello_world::HelloOutput* Arena::CreateMaybeMessage<::hello_world::HelloOutput>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace hello_world {

// ===================================================================

class HelloInput final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:hello_world.HelloInput) */ {
 public:
  HelloInput();
  virtual ~HelloInput();

  HelloInput(const HelloInput& from);

  inline HelloInput& operator=(const HelloInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloInput(HelloInput&& from) noexcept
    : HelloInput() {
    *this = ::std::move(from);
  }

  inline HelloInput& operator=(HelloInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HelloInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloInput* internal_default_instance() {
    return reinterpret_cast<const HelloInput*>(
               &_HelloInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HelloInput* other);
  friend void swap(HelloInput& a, HelloInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloInput* New() const final {
    return CreateMaybeMessage<HelloInput>(nullptr);
  }

  HelloInput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HelloInput>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const HelloInput& from);
  void MergeFrom(const HelloInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HelloInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string to_greet = 1;
  bool has_to_greet() const;
  void clear_to_greet();
  static const int kToGreetFieldNumber = 1;
  const ::std::string& to_greet() const;
  void set_to_greet(const ::std::string& value);
  #if LANG_CXX11
  void set_to_greet(::std::string&& value);
  #endif
  void set_to_greet(const char* value);
  void set_to_greet(const char* value, size_t size);
  ::std::string* mutable_to_greet();
  ::std::string* release_to_greet();
  void set_allocated_to_greet(::std::string* to_greet);

  // @@protoc_insertion_point(class_scope:hello_world.HelloInput)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr to_greet_;
  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class HelloOutput final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:hello_world.HelloOutput) */ {
 public:
  HelloOutput();
  virtual ~HelloOutput();

  HelloOutput(const HelloOutput& from);

  inline HelloOutput& operator=(const HelloOutput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloOutput(HelloOutput&& from) noexcept
    : HelloOutput() {
    *this = ::std::move(from);
  }

  inline HelloOutput& operator=(HelloOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HelloOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloOutput* internal_default_instance() {
    return reinterpret_cast<const HelloOutput*>(
               &_HelloOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HelloOutput* other);
  friend void swap(HelloOutput& a, HelloOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloOutput* New() const final {
    return CreateMaybeMessage<HelloOutput>(nullptr);
  }

  HelloOutput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HelloOutput>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const HelloOutput& from);
  void MergeFrom(const HelloOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HelloOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string greeting_message = 1;
  bool has_greeting_message() const;
  void clear_greeting_message();
  static const int kGreetingMessageFieldNumber = 1;
  const ::std::string& greeting_message() const;
  void set_greeting_message(const ::std::string& value);
  #if LANG_CXX11
  void set_greeting_message(::std::string&& value);
  #endif
  void set_greeting_message(const char* value);
  void set_greeting_message(const char* value, size_t size);
  ::std::string* mutable_greeting_message();
  ::std::string* release_greeting_message();
  void set_allocated_greeting_message(::std::string* greeting_message);

  // @@protoc_insertion_point(class_scope:hello_world.HelloOutput)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr greeting_message_;
  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class EnclaveInput final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:hello_world.EnclaveInput) */ {
 public:
  EnclaveInput();
  virtual ~EnclaveInput();

  EnclaveInput(const EnclaveInput& from);

  inline EnclaveInput& operator=(const EnclaveInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnclaveInput(EnclaveInput&& from) noexcept
    : EnclaveInput() {
    *this = ::std::move(from);
  }

  inline EnclaveInput& operator=(EnclaveInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EnclaveInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnclaveInput* internal_default_instance() {
    return reinterpret_cast<const EnclaveInput*>(
               &_EnclaveInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(EnclaveInput* other);
  friend void swap(EnclaveInput& a, EnclaveInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnclaveInput* New() const final {
    return CreateMaybeMessage<EnclaveInput>(nullptr);
  }

  EnclaveInput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnclaveInput>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const EnclaveInput& from);
  void MergeFrom(const EnclaveInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnclaveInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(EnclaveInput)
  // @@protoc_insertion_point(class_scope:hello_world.EnclaveInput)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class EnclaveOutput final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:hello_world.EnclaveOutput) */ {
 public:
  EnclaveOutput();
  virtual ~EnclaveOutput();

  EnclaveOutput(const EnclaveOutput& from);

  inline EnclaveOutput& operator=(const EnclaveOutput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnclaveOutput(EnclaveOutput&& from) noexcept
    : EnclaveOutput() {
    *this = ::std::move(from);
  }

  inline EnclaveOutput& operator=(EnclaveOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EnclaveOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnclaveOutput* internal_default_instance() {
    return reinterpret_cast<const EnclaveOutput*>(
               &_EnclaveOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EnclaveOutput* other);
  friend void swap(EnclaveOutput& a, EnclaveOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnclaveOutput* New() const final {
    return CreateMaybeMessage<EnclaveOutput>(nullptr);
  }

  EnclaveOutput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnclaveOutput>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const EnclaveOutput& from);
  void MergeFrom(const EnclaveOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnclaveOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(EnclaveOutput)
  // @@protoc_insertion_point(class_scope:hello_world.EnclaveOutput)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// ===================================================================

static const int kEnclaveInputHelloFieldNumber = 8086;
extern ::google::protobuf::internal::ExtensionIdentifier< ::hello_world::EnclaveInput,
    ::google::protobuf::internal::MessageTypeTraits< ::hello_world::HelloInput >, 11, false >
  enclave_input_hello;
static const int kEnclaveOutputHelloFieldNumber = 8087;
extern ::google::protobuf::internal::ExtensionIdentifier< ::hello_world::EnclaveOutput,
    ::google::protobuf::internal::MessageTypeTraits< ::hello_world::HelloOutput >, 11, false >
  enclave_output_hello;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HelloInput

// optional string to_greet = 1;
inline bool HelloInput::has_to_greet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloInput::clear_to_greet() {
  to_greet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& HelloInput::to_greet() const {
  // @@protoc_insertion_point(field_get:hello_world.HelloInput.to_greet)
  return to_greet_.GetNoArena();
}
inline void HelloInput::set_to_greet(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  to_greet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hello_world.HelloInput.to_greet)
}
#if LANG_CXX11
inline void HelloInput::set_to_greet(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  to_greet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hello_world.HelloInput.to_greet)
}
#endif
inline void HelloInput::set_to_greet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  to_greet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hello_world.HelloInput.to_greet)
}
inline void HelloInput::set_to_greet(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  to_greet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hello_world.HelloInput.to_greet)
}
inline ::std::string* HelloInput::mutable_to_greet() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hello_world.HelloInput.to_greet)
  return to_greet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloInput::release_to_greet() {
  // @@protoc_insertion_point(field_release:hello_world.HelloInput.to_greet)
  if (!has_to_greet()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return to_greet_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloInput::set_allocated_to_greet(::std::string* to_greet) {
  if (to_greet != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  to_greet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_greet);
  // @@protoc_insertion_point(field_set_allocated:hello_world.HelloInput.to_greet)
}

// -------------------------------------------------------------------

// HelloOutput

// optional string greeting_message = 1;
inline bool HelloOutput::has_greeting_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloOutput::clear_greeting_message() {
  greeting_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& HelloOutput::greeting_message() const {
  // @@protoc_insertion_point(field_get:hello_world.HelloOutput.greeting_message)
  return greeting_message_.GetNoArena();
}
inline void HelloOutput::set_greeting_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  greeting_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hello_world.HelloOutput.greeting_message)
}
#if LANG_CXX11
inline void HelloOutput::set_greeting_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  greeting_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hello_world.HelloOutput.greeting_message)
}
#endif
inline void HelloOutput::set_greeting_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  greeting_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hello_world.HelloOutput.greeting_message)
}
inline void HelloOutput::set_greeting_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  greeting_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hello_world.HelloOutput.greeting_message)
}
inline ::std::string* HelloOutput::mutable_greeting_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hello_world.HelloOutput.greeting_message)
  return greeting_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloOutput::release_greeting_message() {
  // @@protoc_insertion_point(field_release:hello_world.HelloOutput.greeting_message)
  if (!has_greeting_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return greeting_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloOutput::set_allocated_greeting_message(::std::string* greeting_message) {
  if (greeting_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  greeting_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), greeting_message);
  // @@protoc_insertion_point(field_set_allocated:hello_world.HelloOutput.greeting_message)
}

// -------------------------------------------------------------------

// EnclaveInput

// -------------------------------------------------------------------

// EnclaveOutput

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hello_world

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_hello_2eproto
